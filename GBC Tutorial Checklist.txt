# Fall 2023 Game Builder's Club Tutorial Game

Relic Defense: Siege of the Void  

# Step-by-Step
## Introduction: The Basics
1. Introduce Unity UI: Hierarchy, Scene View, Game View, Inspector, Asset Menu.
1. Asset Menu: basically a file browser that shows all of your files. Changing branches in GitHub modifies your files and Unity reloads those.
1. Hierarchy: objects in the scene, objects can be children or parents.
1. Scene View: see the objects, tools to move around.
1. Game View: see what the camera shows.
1. Inspector: see components on an object. Every object has a transform. You can modify the values and you can drag numerical values to increase/decrease them. Empty GameObjects are objects without any extra components (just the transform). Other objects already have components, like square sprites having a sprite renderer.
1. Explain opening a scene and seeing objects.
1. Make sure there's a square sprite in the scene.
1. Create a player controller script for the sprite.
1. Explain overview of relevant parts of code: everything is in classes, variables, properties, methods.
1. Explain visibility ("public", "protected", "" (package private), "private") and SerializeField for variables in inspector: default to protected
1. Explain all classes that you want to attach as components extend Monobehaviour, so they get all of Monobehavior's functionality. Monobehaviour methods (awake, start, update, fixedupdate)
1. Add basic code to each part of the script to indicate use (debug.log).

## Introduction: Moving a Character
1. Show character sprites: show Sprite inspector menu and add to scene
1. Add sprites to scene to create animations
1. Put sprites under player GameObject (Player > Visuals > PlayerSprite)
1. Add Rigidbody for Player GameObject (this is for moving with the physics engine): gravity scale is 0
1. Add PlayerController script: void Move(Vector2 direction)
1. Introduce package manager: install new Unity Input System - install and restart editor to change backends.
1. Create Input Actions (ScriptableObjects > Input > Controls): Add control scheme (keyboard), add action map (character), add move action (value, vector2, add up/down/left/right composite binding), save asset, check generate C# class.
1. Add PlayerInput component to player GameObject: Select Input Action (Controls) for PlayerInput's Actions, select (under Behavior) "Invoke Unity Events".
1. Add under Move event the method from PlayerController, change parameter to InputAction.CallbackContext and call .GetValue<Vector2>() on input.